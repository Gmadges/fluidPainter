#version 300 es
in mediump vec2 tex;

out highp vec4 FragColor;

uniform sampler2D source;                                    
uniform sampler2D target;                                       

uniform mediump float InverseSize;                                      
uniform mediump float dt;                             

//void main()                                                          
//{  
//    vec2 fragCoord = gl_FragCoord.xy;
//    vec2 u = texture(source, InverseSize * fragCoord).xy;
//    vec2 coord = InverseSize * (fragCoord - dt * u);

//    // just using a dissapation at the moment should probably blend
//    FragColor = 0.8 * texture(target, coord);
//}

void main()                                                          
{  
    // get tex coords
    vec2 fragCoord = tex;                                                                                               

    // find position
    vec2 pos = InverseSize * (fragCoord - dt * texture(source, InverseSize * fragCoord).xy);

    vec4 st;
    st.xy = floor(pos - 0.5) + 0.5;
    st.zw = st.xy + 1.0;

    vec2 t = pos - st.xy; //interpolating factors

    vec4 tex11 = texture(target, st.xy);
    vec4 tex21 = texture(target, st.zy);
    vec4 tex12 = texture(target, st.xw);
    vec4 tex22 = texture(target, st.zw);

    // bilinear interpolation
    FragColor = mix(mix(tex11, tex21, t.x), mix(tex12, tex22, t.x), t.y);
}#version 300 es

in mediump vec2 tex;

out mediump vec4 FragColor;                                           

uniform sampler2D Velocity;                                                                                  
uniform mediump float HalfInverseCellSize;
uniform mediump vec2 inverseRes;

vec2 sampleVelocity(sampler2D velocity, vec2 coord)
{
    
    vec2 cellOffset = vec2(0.0, 0.0);
    vec2 multiplier = vec2(1.0, 1.0);

    // handle me bounds
    if(coord.x < 0.0)
    {
        cellOffset.x = 1.0;
        multiplier.x = -1.0;
    }
    else if(coord.x > 1.0)
    {
        cellOffset.x = -1.0;
        multiplier.x = -1.0;
    }

    if(coord.y < 0.0)
    {
        cellOffset.y = 1.0;
        multiplier.y = -1.0;
    }
    else if(coord.y > 1.0)
    {
        cellOffset.y = -1.0;
        multiplier.y = -1.0;
    }

    return multiplier * texture(velocity, coord + cellOffset * inverseRes).xy;
}                            

void main()                                                           
{                                                                                                     
    // Find neighboring velocities, north, east , south, west
    vec2 vT = sampleVelocity(Velocity, tex + vec2(0, inverseRes.y));
    vec2 vB = sampleVelocity(Velocity, tex - vec2(0, inverseRes.y));      
    vec2 vR = sampleVelocity(Velocity, tex + vec2(inverseRes.x, 0));       
    vec2 vL = sampleVelocity(Velocity, tex - vec2(inverseRes.x, 0));              

    FragColor = vec4( HalfInverseCellSize * (abs(vR.x - vL.x) + abs(vT.y - vB.y)), 0, 0, 1);   
}                                                                     
#version 300 es 
in mediump vec2 tex;

out mediump vec4 FragColor;                                            

uniform sampler2D Velocity;                                            
uniform sampler2D Pressure;

uniform mediump float HalfInverseCellSize;
uniform mediump vec2 inverseRes;    

float samplePressure(sampler2D pressure, vec2 coord)
{
    vec2 cellOffset = vec2(0.0, 0.0);

    // more bound checking
    if(coord.x < 0.0)
    {      
        cellOffset.x = 1.0;
    }
    else if(coord.x > 1.0) 
    {
        cellOffset.x = -1.0;
    }

    if(coord.y < 0.0)
    {
        cellOffset.y = 1.0;
    }
    else if(coord.y > 1.0) 
    {
        cellOffset.y = -1.0;
    }

    return texture(pressure, coord + cellOffset * inverseRes).x;
}                                  

void main()                                                            
{                                                                      
    float L = samplePressure(Pressure, tex - vec2(inverseRes.x, 0));
    float R = samplePressure(Pressure, tex + vec2(inverseRes.x, 0));
    float B = samplePressure(Pressure, tex - vec2(0, inverseRes.y));
    float T = samplePressure(Pressure, tex + vec2(0, inverseRes.y));

    vec2 v = texture(Velocity, tex).xy;

    FragColor = vec4(v - HalfInverseCellSize * vec2(abs(R-L), abs(T-B)), 0, 1);                        
}                                                                       #version 300 es
in mediump vec2 tex;

out highp vec4 FragColor;                           

uniform mediump vec2 Point;                           
uniform mediump float Radius;                         
uniform mediump vec3 FillColor;                       

void main()                                           
{   
    vec4 force = vec4(0,0,0,1);                                                  
    
    float d = distance(Point, tex);
    
    if (d < Radius) 
    {
        force = vec4(FillColor, 1.0);
    }  

    FragColor = force;                                                                   
}                                                     #version 300 es
in mediump vec2 tex;

out mediump vec4 FragColor;

uniform sampler2D image;                               

void main()                                                          
{ 
    vec3 color = texture(image, tex).xyz;
    FragColor = vec4(color, 1.0f);       
}#version 300 es                       
in vec4 Position;   
in vec2 Texcoord;              

out mediump vec2 tex;

void main()                           
{  
    tex = Texcoord;                                         
    gl_Position = Position;     
}                                     #version 300 es
in mediump vec2 tex;

out mediump vec4 FragColor;                                         

uniform sampler2D Pressure;                                                
uniform sampler2D Divergence;                                                                                           

uniform mediump vec2 inverseRes;
uniform mediump float Alpha;                                               

float samplePressure(sampler2D pressure, vec2 coord)
{
    vec2 cellOffset = vec2(0.0, 0.0);

    // more bound checking
    if(coord.x < 0.0)
    {      
        cellOffset.x = 1.0;
    }
    else if(coord.x > 1.0) 
    {
        cellOffset.x = -1.0;
    }

    if(coord.y < 0.0)
    {
        cellOffset.y = 1.0;
    }
    else if(coord.y > 1.0) 
    {
        cellOffset.y = -1.0;
    }

    return texture(pressure, coord + cellOffset * inverseRes).x;
}                                       

void main()                                                                
{                                                                          
    float L = samplePressure(Pressure, tex - vec2(inverseRes.x, 0));
    float R = samplePressure(Pressure, tex + vec2(inverseRes.x, 0));
    float B = samplePressure(Pressure, tex - vec2(0, inverseRes.y));
    float T = samplePressure(Pressure, tex + vec2(0, inverseRes.y));

    float bC = texture(Divergence, tex).x;

    // use 0.25 as rBeta
    FragColor = vec4( (L + R + B + T + Alpha * bC) * 0.25, 0.0f, 0.0f, 1.0f );            
}  