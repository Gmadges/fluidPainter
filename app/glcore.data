#version 300 es
out mediump vec4 FragColor;

uniform sampler2D velocity;                                    
uniform sampler2D target;                                       

uniform mediump float InverseSize;                                      
uniform mediump float dt;                             

void main()                                                          
{  
    // get tex coords
    vec2 fragCoord = gl_FragCoord.xy;                                                                                               

    // find position
    vec2 pos = InverseSize * (fragCoord - dt * texture(velocity, InverseSize * fragCoord).xy);

    vec4 st;
    st.xy = floor(pos - 0.5) + 0.5;
    st.zw = st.xy + 1.0;

    vec2 t = pos - st.xy; //interpolating factors

    vec4 tex11 = texture(target, st.xy);
    vec4 tex21 = texture(target, st.zy);
    vec4 tex12 = texture(target, st.xw);
    vec4 tex22 = texture(target, st.zw);

    // bilinear interpolation
    FragColor = mix(mix(tex11, tex21, t.x), mix(tex12, tex22, t.x), t.y);
}#version 300 es                                                        
out mediump vec4 FragColor;                                           

uniform sampler2D Velocity;                                                                                  
uniform mediump float HalfInverseCellSize;                            

void main()                                                           
{                                                                     
    ivec2 T = ivec2(gl_FragCoord.xy);                                 

    // Find neighboring velocities:
    vec2 vN = texelFetchOffset(Velocity, T, 0, ivec2(0, 1)).xy;       
    vec2 vS = texelFetchOffset(Velocity, T, 0, ivec2(0, -1)).xy;      
    vec2 vE = texelFetchOffset(Velocity, T, 0, ivec2(1, 0)).xy;       
    vec2 vW = texelFetchOffset(Velocity, T, 0, ivec2(-1, 0)).xy;        

    
    FragColor = vec4(vec3(HalfInverseCellSize * (vE.x - vW.x + vN.y - vS.y)), 1.0);    
}                                                                     
#version 300 es                                                        
out mediump vec4 FragColor;                                            

uniform sampler2D Velocity;                                            
uniform sampler2D Pressure;                                                                                     
uniform mediump float GradientScale;                                   

void main()                                                            
{                                                                      
    ivec2 T = ivec2(gl_FragCoord.xy);                                                                                                

    // Find neighboring pressure:
    float pN = texelFetchOffset(Pressure, T, 0, ivec2(0, 1)).r;        
    float pS = texelFetchOffset(Pressure, T, 0, ivec2(0, -1)).r;       
    float pE = texelFetchOffset(Pressure, T, 0, ivec2(1, 0)).r;        
    float pW = texelFetchOffset(Pressure, T, 0, ivec2(-1, 0)).r;       
    float pC = texelFetch(Pressure, T, 0).r;                              

    // Use center pressure for solid cells:                                        
    
    vec2 vMask = vec2(1.0f);                                             

    // Enforce the free-slip boundary condition

    vec2 oldV = texelFetch(Velocity, T, 0).xy;                         
    vec2 grad = vec2(pE - pW, pN - pS) * GradientScale;                
    vec2 newV = oldV - grad;                                           
    FragColor = vec4((vMask * newV), 0, 1);                             
}                                                                       #version 300 es                                       
out mediump vec4 FragColor;                           

uniform mediump vec2 Point;                           
uniform mediump float Radius;                         
uniform mediump vec3 FillColor;                       

void main()                                           
{                                                     
    FragColor = vec4(1, 1, 1, 1);                                                                          
}                                                     #version 300 es

out mediump vec4 FragColor;

uniform sampler2D image;                               

void main()                                                          
{ 
    vec3 color = texture(image, gl_FragCoord.xy).xyz;
    //vec3 color = vec3(1.0, 0.0, 1.0);
    FragColor = vec4(color, 1.0f);       
}    #version 300 es                       
    in vec4 Position;              
    
    void main()                           
    {                                     
        gl_Position = Position;           
    }                                     #version 300 es                                                     
out mediump vec4 FragColor;                                         

uniform sampler2D Pressure;                                                
uniform sampler2D Divergence;                                                                                           

uniform mediump float Alpha;                                               
uniform mediump float InverseBeta;                                         

void main()                                                                
{                                                                          
    ivec2 T = ivec2(gl_FragCoord.xy);       

    // Find neighboring pressure:                                          
    vec4 pN = texelFetchOffset(Pressure, T, 0, ivec2(0, 1));
    vec4 pS = texelFetchOffset(Pressure, T, 0, ivec2(0, -1));
    vec4 pE = texelFetchOffset(Pressure, T, 0, ivec2(1, 0));
    vec4 pW = texelFetchOffset(Pressure, T, 0, ivec2(-1, 0));
    vec4 pC = texelFetch(Pressure, T, 0);

    vec4 bC = texelFetch(Divergence, T, 0);
    
    FragColor = (pW + pE + pS + pN + Alpha * bC) * InverseBeta;            
}  